# Yaml is white-space sensitive (use 2 spaces to indent).

###
# Define a new window with an id of 'bar'. This window can then be opened
# via the Zebar cli by running 'zebar open bar --args <ARGS...>'.
#
# Docs regarding window: https://some-future-docs-link.com
window/bar:
  providers: ['self']
  # Width of the window in physical pixels.
  width: '{{ self.args.MONITOR_WIDTH }}'
  # Height of the window in physical pixels.
  height: '25'
  # X-position of the window in physical pixels.
  position_x: '{{ self.args.MONITOR_X }}'
  # Y-position of the window in physical pixels.
  position_y: '{{ self.args.MONITOR_Y }}'
  # Whether to show the window above/below all others.
  # Allowed values: 'always_on_top', 'always_on_bottom', 'normal'.
  z_order: 'normal'
  always_on_top: true
  windows_app_bar: true
  # Whether the window should be shown in the taskbar.
  shown_in_taskbar: false
  # Whether the window should have resize handles.
  resizable: false
  # Styles to apply globally within the window. For example, we can use
  # this to import the Nerdfonts icon font. Ref https://www.nerdfonts.com/cheat-sheet
  # for a cheatsheet of available Nerdfonts icons.
  global_styles: |
    @import "https://www.nerdfonts.com/assets/css/webfont.css";

  styles: |
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    align-items: center;
    height: 100%;
    padding: 0 18px;
    color: #ebdbb2;
    font-family: 'JetBrains Mono', 'Fira Code', ui-monospace, monospace;
    font-size: 12px;
    line-height: 1.5;
    background: linear-gradient(165deg, #1d2021 0%, #282828 50%, #32302f 100%);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(251, 241, 199, 0.08);
    box-shadow: inset 0 1px 0 rgba(251, 241, 199, 0.03);

    i {
      font-style: normal;
      color: #d5c4a1;
      margin-right: 6px;
      transition: all 200ms cubic-bezier(0.4, 0, 0.2, 1);
      filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.3));
    }

  group/left:
    styles: |
      display: flex;
      align-items: center;
      height: 100%;

    template/logo:
      styles: |
        display: flex;
        align-items: center;
        margin-right: 16px;
        
        i {
          color: #fabd2f;
          font-size: 16px;
          margin: 0;
          filter: drop-shadow(0 0 6px rgba(250, 189, 47, 0.4));
        }
      template: |
        <i class="nf nf-oct-codespaces"></i>

    template/glazewm_workspaces:
      styles: |
        display: flex;
        align-items: center;
        gap: 6px;

        .workspace {
          position: relative;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          min-width: 32px;
          padding: 6px 12px;
          background: linear-gradient(145deg, #3c3836, #32302f);
          color: #a89984;
          border: 1px solid transparent;
          border-radius: 6px;
          cursor: pointer;
          font-weight: 500;
          font-size: 11px;
          letter-spacing: 0.3px;
          transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2), inset 0 1px 0 rgba(251, 241, 199, 0.03);

          &.displayed {
            background: linear-gradient(145deg, #504945, #3c3836);
            color: #d5c4a1;
            border-color: rgba(168, 153, 132, 0.2);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(251, 241, 199, 0.08);
          }

          &.focused,
          &:hover {
            background: linear-gradient(145deg, #b8bb26, #98971a);
            color: #1d2021;
            border-color: rgba(184, 187, 38, 0.5);
            transform: translateY(-1px) scale(1.05);
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(184, 187, 38, 0.35), 0 0 20px rgba(184, 187, 38, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.2);
          }
        }

      providers: ['glazewm']
      events:
        - type: 'click'
          fn_path: 'script.js#focusWorkspace'
          selector: '.workspace'
      template: |
        @for (workspace of glazewm.currentWorkspaces) {
          <button
            class="workspace {{ workspace.hasFocus ? 'focused' : '' }} {{ workspace.isDisplayed ? 'displayed' : '' }}"
            id="{{ workspace.name }}"
          >
            {{ workspace.displayName ?? workspace.name }}
          </button>
        }

  group/center:
    styles: |
      justify-self: center;
      display: flex;
      align-items: center;
      height: 100%;
      
      .current-focus {
        padding: 6px 16px;
        background: linear-gradient(145deg, rgba(60, 56, 54, 0.6), rgba(50, 48, 47, 0.6));
        border: 1px solid rgba(251, 241, 199, 0.08);
        border-radius: 8px;
        color: #fbf1c7;
        font-size: 11px;
        font-weight: 500;
        max-width: 500px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        backdrop-filter: blur(8px);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.25), inset 0 1px 0 rgba(251, 241, 199, 0.05);
      }
    template/glazewm_other:
      providers: ['glazewm']
      template: |
        <span class="current-focus">
          {{ glazewm.focusedContainer.title.length > 80 ? glazewm.focusedContainer.title.slice(0, 80) + '...' : glazewm.focusedContainer.title }}
        </span>

  group/right:
    styles: |
      justify-self: end;
      display: flex;
      align-items: center;
      gap: 14px;
      height: 100%;

    template/network:
      providers: ['network']
      styles: |
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 500;
        color: #d3869b;
        transition: all 200ms ease;
        
        i { 
          color: #d3869b !important;
          filter: none !important;
          text-shadow: none !important;
          background: none !important;
          background-color: transparent !important;
          box-shadow: none !important;
        }
      template: |
        @if (network.defaultInterface?.type === 'ethernet') {
          <i class="nf nf-md-ethernet_cable"></i>
        } @else if (network.defaultInterface?.type === 'wifi') {
          @if (network.defaultGateway?.signalStrength >= 80) {<i class="nf nf-md-wifi_strength_4"></i>}
          @else if (network.defaultGateway?.signalStrength >= 65) {<i class="nf nf-md-wifi_strength_3"></i>}
          @else if (network.defaultGateway?.signalStrength >= 40) {<i class="nf nf-md-wifi_strength_2"></i>}
          @else if (network.defaultGateway?.signalStrength >= 25) {<i class="nf nf-md-wifi_strength_1"></i>}
          @else {<i class="nf nf-md-wifi_strength_outline"></i>}
          {{ network.defaultGateway?.ssid }}
        } @else {
          <i class="nf nf-md-wifi_strength_off_outline"></i>
        }

    template/memory:
      providers: ['memory']
      styles: |
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 500;
        color: #b8bb26;
        transition: all 200ms ease;
        
        i { color: #b8bb26; }
      template: |
        <i class="nf nf-fae-chip"></i>
        {{ Math.round(memory.usage) }}%

    template/cpu:
      providers: ['cpu']
      styles: |
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 500;
        transition: all 200ms ease;
        
        i { color: #83a598; }
        
        .high-usage {
          color: #fb4934;
          font-weight: 600;
          text-shadow: 0 0 8px rgba(251, 73, 52, 0.4);
          animation: pulse-red 2s ease-in-out infinite;
        }
        
        @keyframes pulse-red {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.85; }
        }
      template: |
        <i class="nf nf-oct-cpu"></i>
        @if (cpu.usage > 85) {
          <span class="high-usage">{{ Math.round(cpu.usage) }}%</span>
        } @else {
          <span>{{ Math.round(cpu.usage) }}%</span>
        }

    template/battery:
      providers: ['battery']
      styles: |
        position: relative;
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 500;
        color: #8ec07c;
        transition: all 200ms ease;
        
        i { color: #8ec07c; }
        
        .charging-icon {
          position: absolute;
          font-size: 8px;
          left: -8px;
          top: 3px;
          color: #fabd2f;
          animation: pulse-charge 1.5s ease-in-out infinite;
          filter: drop-shadow(0 0 4px rgba(250, 189, 47, 0.6));
        }
        
        @keyframes pulse-charge {
          0%, 100% { opacity: 1; transform: scale(1); }
          50% { opacity: 0.7; transform: scale(0.95); }
        }
      template: |
        @if (battery.isCharging) {<i class="nf nf-md-power_plug charging-icon"></i>}
        
        @if (battery.chargePercent > 90) {<i class="nf nf-fa-battery_4"></i>}
        @else if (battery.chargePercent > 70) {<i class="nf nf-fa-battery_3"></i>}
        @else if (battery.chargePercent > 40) {<i class="nf nf-fa-battery_2"></i>}
        @else if (battery.chargePercent > 20) {<i class="nf nf-fa-battery_1"></i>}
        @else {<i class="nf nf-fa-battery_0"></i>}

        {{ Math.round(battery.chargePercent) }}%

    template/weather:
      providers: ['weather']
      styles: |
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 500;
        color: #fe8019;
        transition: all 200ms ease;
        
        i { color: #fe8019; }
      template: |
        @switch (weather.status) {
          @case ('clear_day') {<i class="nf nf-weather-day_sunny"></i>}
          @case ('clear_night') {<i class="nf nf-weather-night_clear"></i>}
          @case ('cloudy_day') {<i class="nf nf-weather-day_cloudy"></i>}
          @case ('cloudy_night') {<i class="nf nf-weather-night_alt_cloudy"></i>}
          @case ('light_rain_day') {<i class="nf nf-weather-day_sprinkle"></i>}
          @case ('light_rain_night') {<i class="nf nf-weather-night_alt_sprinkle"></i>}
          @case ('heavy_rain_day') {<i class="nf nf-weather-day_rain"></i>}
          @case ('heavy_rain_night') {<i class="nf nf-weather-night_alt_rain"></i>}
          @case ('snow_day') {<i class="nf nf-weather-day_snow"></i>}
          @case ('snow_night') {<i class="nf nf-weather-night_alt_snow"></i>}
          @case ('thunder_day') {<i class="nf nf-weather-day_lightning"></i>}
          @case ('thunder_night') {<i class="nf nf-weather-night_alt_lightning"></i>}
        }
        {{ weather.celsiusTemp }}°
    template/clock:
      providers: ['date']
      styles: |
        display: flex;
        align-items: center;
        font-size: 11px;
        font-weight: 600;
        letter-spacing: 0.5px;
        color: #fbf1c7;
        transition: all 200ms ease;
      # Available date tokens: https://moment.github.io/luxon/#/formatting?id=table-of-tokens
      template: |
        {{ date.toFormat(date.now, 'EEE	d MMM t') }}

